-- generate_filetypes.lua
local devicons = require("nvim-web-devicons")

---@return string
local function get_rg_types()
  local handle = io.popen("rg --type-list")
  if not handle then
    return ""
  end
  local output = handle:read("*a")
  handle:close()
  return output
end

---@param output string
---@return ContextEntries
local function parse_rg_type_list(output)
  ---Extract simple extensions from a type entry like "*.ext"
  ---@param extlist string
  ---@return string[]
  local function extract_safe_extensions(extlist)
    local extensions = {}
    for ext in extlist:gmatch("%*%.([%w_]+)") do
      table.insert(extensions, ext)
    end
    return extensions
  end

  ---Detect devicons icon source (filetype or extension)
  ---@param filetype string
  ---@param extensions string[]
  ---@return { filetype: string?, extension: string? }?
  local function detect_icon_source(filetype, extensions)
    local result = {}

    -- Try devicons by filetype
    local icon, _ = devicons.get_icon_by_filetype(filetype)
    if icon then
      result.filetype = filetype
    end

    -- Try devicons by extension (first match)
    for _, ext in ipairs(extensions) do
      icon, _ = devicons.get_icon(nil, ext)
      if icon then
        result.extension = ext
        break
      end
    end

    -- return result only if at least one was found
    if result.filetype or result.extension then
      return result
    end

    return nil
  end

  -- Parse each line of `rg --type-list` output
  local result = {}
  for line in output:gmatch("[^\r\n]+") do
    local filetype, extlist = line:match("([^:]+):%s*(.+)")
    if filetype and extlist then
      local extensions = extract_safe_extensions(extlist)
      local icon_info = detect_icon_source(filetype, extensions)
      if icon_info then
        local entry = {
          label = filetype, -- original filetype used as label
          filetype = icon_info.filetype,
          extension = icon_info.extension,
          commands = {
            rg = { flags = { "--type", filetype } },
            git_grep = { globs = {} },
          },
        }

        -- Convert '*.ext' to glob list
        for ext in extlist:gmatch("%S+") do
          local extension, _ = ext:gsub(",$", "")
          table.insert(entry.commands.git_grep.globs, extension)
        end

        result[filetype] = entry
      end
    end
  end

  return result
end

---@param tbl ContextEntries
---@param filepath string
local function write_lua_table(tbl, filepath)
  local file, err = io.open(filepath, "w")
  if not file then
    io.stderr:write("Error opening file for writing: " .. tostring(err) .. "\n")
    os.exit(1)
  end

  file:write('-- Auto-generated by the following command:\n-- $ nvim --headless "+luafile generate_filetypes.lua" +q\n\n')
  file:write("---@type ContextGroup\n")
  file:write("return {\n")
  file:write('  title = "Filetypes",\n')
  file:write("  entries = {\n")

  -- sort keys for stable output
  local keys = {}
  for k in pairs(tbl) do
    table.insert(keys, k)
  end
  table.sort(keys)

  for _, name in ipairs(keys) do
    local entry = tbl[name]
    file:write(string.format("    %s = {\n", name))
    file:write(string.format('      label = "%s",\n', entry.label))
    if entry.filetype then
      file:write(string.format('      filetype = "%s",\n', entry.filetype))
    end
    if entry.extension then
      file:write(string.format('      extension = "%s",\n', entry.extension))
    end
    file:write("      commands = {\n")
    file:write(string.format('        rg = { flags = { "--type", "%s" } },\n', name))
    local globs = entry.commands.git_grep.globs or {}
    if #globs > 1 then
      file:write("        git_grep = {\n")
      file:write("          globs = {\n")
      for _, g in ipairs(entry.commands.git_grep.globs) do
        file:write(string.format('            "%s",\n', g))
      end
      file:write("          },\n")
      file:write("        },\n")
    elseif #globs == 1 then
      file:write(string.format('        git_grep = { globs = { "%s" } },\n', globs[1]))
    end
    file:write("      },\n")
    file:write("    },\n")
  end

  file:write("  },\n")
  file:write("}\n")
  file:close()
end

-- Main
local rg_output = get_rg_types()
local parsed = parse_rg_type_list(rg_output)
write_lua_table(parsed, "filetypes.lua")
print("filetypes.lua written with " .. tostring(#vim.tbl_keys(parsed)) .. " entries.\n")
