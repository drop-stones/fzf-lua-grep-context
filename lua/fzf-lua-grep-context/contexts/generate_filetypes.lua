-- generate_filetypes.lua

---@return string
local function get_rg_types()
  local handle = io.popen("rg --type-list")
  if not handle then
    return ""
  end
  local output = handle:read("*a")
  handle:close()
  return output
end

---@return table<string, boolean>
local function get_valid_filetypes()
  local filetypes = {}

  local mini_icons = require("mini.icons")
  for _, filetype in ipairs(mini_icons.list("filetype")) do
    filetypes[filetype] = true
  end

  return filetypes
end

---@param output string
---@param valid_filetypes table<string, boolean>
---@return ContextEntries
local function parse_rg_type_list(output, valid_filetypes)
  local result = {}
  for line in output:gmatch("[^\r\n]+") do
    local name, extlist = line:match("([^:]+):%s*(.+)")
    if name and extlist and valid_filetypes[name] then
      local entry = {
        label = name, -- use lowercase label
        filetype = name,
        commands = {
          rg = { flags = { "--type", name } },
          git_grep = { globs = {} },
        },
      }
      for ext in extlist:gmatch("%S+") do
        ext = ext:gsub(",$", "") -- remove trailing comma
        table.insert(entry.commands.git_grep.globs, ext)
      end
      result[name] = entry
    end
  end
  return result
end

---@param tbl ContextEntries
---@param filepath string
local function write_lua_table(tbl, filepath)
  local file, err = io.open(filepath, "w")
  if not file then
    io.stderr:write("Error opening file for writing: " .. tostring(err) .. "\n")
    os.exit(1)
  end

  file:write('-- Auto-generated by the following command:\n-- $ nvim --headless "+luafile generate_filetypes.lua" +q\n\n')
  file:write("---@type ContextGroup\n")
  file:write("return {\n")
  file:write('  title = "Filetypes",\n')
  file:write("  entries = {\n")

  -- sort keys for stable output
  local keys = {}
  for k in pairs(tbl) do
    table.insert(keys, k)
  end
  table.sort(keys)

  for _, name in ipairs(keys) do
    local entry = tbl[name]
    file:write(string.format("    %s = {\n", name))
    file:write(string.format('      label = "%s",\n', entry.label))
    file:write(string.format('      filetype = "%s",\n', entry.filetype))
    file:write("      commands = {\n")
    file:write(string.format('        rg = { flags = { "--type", "%s" } },\n', name))
    local globs = entry.commands.git_grep.globs or {}
    if #globs > 1 then
      file:write("        git_grep = {\n")
      file:write("          globs = {\n")
      for _, g in ipairs(entry.commands.git_grep.globs) do
        file:write(string.format('            "%s",\n', g))
      end
      file:write("          },\n")
      file:write("        },\n")
    elseif #globs == 1 then
      file:write(string.format('        git_grep = { globs = { "%s" } },\n', globs[1]))
    end
    file:write("      },\n")
    file:write("    },\n")
  end

  file:write("  },\n")
  file:write("}\n")
  file:close()
end

-- Main
local rg_output = get_rg_types()
local valid_filetypes = get_valid_filetypes()
local parsed = parse_rg_type_list(rg_output, valid_filetypes)
write_lua_table(parsed, "filetypes.lua")
print("filetypes.lua written with " .. tostring(#vim.tbl_keys(parsed)) .. " entries.\n")
